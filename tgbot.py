from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import datetime
from app import app, Computer, Booking, User, db
from datetime import datetime, timedelta

TOKEN = "qwe"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üñ•Ô∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤", callback_data='list_computers')],
        [InlineKeyboardButton("‚è∞ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data='my_bookings')],
        [InlineKeyboardButton("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data='book_computer')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∫–ª—É–±–∞!",
        reply_markup=reply_markup
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'list_computers':
        await list_computers(update, context)
    elif query.data == 'my_bookings':
        await my_bookings(update, context)
    elif query.data == 'book_computer':
        await choose_computer(update, context)
    elif query.data.startswith('computer_'):
        computer_id = int(query.data.split('_')[1])
        context.user_data['computer_id'] = computer_id
        await choose_date(update, context)
    elif query.data.startswith('date_'):
        date_str = query.data.split('_')[1]
        await choose_time(update, context, date_str)
    elif query.data.startswith('time_'):
        await handle_time_selection(update, context)

async def list_computers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with app.app_context():
        computers = Computer.query.filter_by(is_active=True).all()
    
    message = "üñ•Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã:\n\n"
    for comp in computers:
        message += f"{comp.name} - {comp.specs}\n"
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=message
    )

async def my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
    
    with app.app_context():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è —Å—Ä–∞–∑—É –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        from sqlalchemy.orm import joinedload
        
        user = User.query.filter_by(telegram_id=update.effective_user.id).first()
        if not user:
            message = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"
            if query:
                await query.edit_message_text(message)
            else:
                await update.message.reply_text(message)
            return
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º–∏ —Å—Ä–∞–∑—É
        bookings = db.session.query(Booking)\
            .options(joinedload(Booking.computer))\
            .filter_by(user_id=user.id)\
            .order_by(Booking.start_time)\
            .all()
    
        if not bookings:
            message = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"
            if query:
                await query.edit_message_text(message)
            else:
                await update.message.reply_text(message)
            return
        
        message = "üìÖ –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        for booking in bookings:
            message += (
                f"üñ•Ô∏è {booking.computer.name}\n"
                f"üìÖ {booking.start_time.strftime('%d.%m.%Y')}\n"
                f"‚è∞ {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}\n"
                f"üîπ {booking.computer.specs}\n\n"
            )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if query:
            await query.edit_message_text(
                text=message,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text=message,
                reply_markup=reply_markup
            )

async def choose_computer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with app.app_context():
        computers = Computer.query.filter_by(is_active=True).all()
    
    keyboard = []
    for comp in computers:
        keyboard.append([InlineKeyboardButton(comp.name, callback_data=f'computer_{comp.id}')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä:",
        reply_markup=reply_markup
    )

async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now().date()
    keyboard = []
    
    for i in range(7):
        date = today + timedelta(days=i)
        keyboard.append(
            [InlineKeyboardButton(date.strftime('%d.%m.%Y'), callback_data=f'date_{date.strftime("%Y-%m-%d")}')]
        )
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=reply_markup
    )


async def choose_time(update: Update, context: ContextTypes.DEFAULT_TYPE, date_str: str):
    selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
    now = datetime.now()
    
    if selected_date == now.date():
        start_hour = now.hour + 1
    else:
        start_hour = 10  # –ö–ª—É–± –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ 10:00
    
    keyboard = []
    for hour in range(start_hour, 22):  # –ö–ª—É–± —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ 22:00
        for minute in ['00', '30']:  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            if hour == 21 and minute == '30':  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç
                continue
            time_str = f"{hour:02d}:{minute}"
            keyboard.append(
                [InlineKeyboardButton(time_str, callback_data=f'time_{date_str}_{time_str}')]
            )
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:",
        reply_markup=reply_markup
    )

async def handle_time_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        _, date_str, time_str = query.data.split('_')
        start_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        end_time = start_time + timedelta(hours=1)
        
        with app.app_context():
            computer_id = context.user_data['computer_id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if not is_computer_available(computer_id, start_time, end_time):
                await query.edit_message_text("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
                return
            
            # –°–æ–∑–¥–∞–µ–º/–Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User.query.filter_by(telegram_id=query.from_user.id).first()
            if not user:
                user = User(
                    username=query.from_user.full_name,
                    telegram_id=query.from_user.id,
                    phone="from_telegram"
                )
                db.session.add(user)
                db.session.commit()
            
            # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            booking = Booking(
                user_id=user.id,
                computer_id=computer_id,
                start_time=start_time,
                end_time=end_time
            )
            db.session.add(booking)
            db.session.commit()
            
            computer = Computer.query.get(computer_id)
            await query.edit_message_text(
                f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n"
                f"üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä: {computer.name}\n"
                f"üìÖ –î–∞—Ç–∞: {start_time.strftime('%d.%m.%Y')}\n"
                f"‚è∞ –í—Ä–µ–º—è: {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}\n\n"
                f"–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ /mybookings"
            )
    except Exception as e:
        print(f"Error: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def is_computer_available(computer_id, start_time, end_time):
    overlapping = Booking.query.filter(
        Booking.computer_id == computer_id,
        Booking.start_time < end_time,
        Booking.end_time > start_time
    ).count()
    return overlapping == 0

def setup_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CommandHandler("mybookings", my_bookings))

def run_bot():
    application = Application.builder().token(TOKEN).build()
    setup_handlers(application)
    application.run_polling()

if __name__ == "__main__":
    run_bot()